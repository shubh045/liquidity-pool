/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LiquidityPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "RBNT"
      | "SHUBH"
      | "addLiquidity"
      | "checkBalance"
      | "exchange"
      | "getBalance"
      | "reserveRBNT"
      | "reserveSHUBH"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "RBNT", values?: undefined): string;
  encodeFunctionData(functionFragment: "SHUBH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRBNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveSHUBH",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "RBNT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SHUBH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveRBNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveSHUBH",
    data: BytesLike
  ): Result;
}

export interface LiquidityPool extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidityPool;
  waitForDeployment(): Promise<this>;

  interface: LiquidityPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  RBNT: TypedContractMethod<[], [string], "view">;

  SHUBH: TypedContractMethod<[], [string], "view">;

  addLiquidity: TypedContractMethod<
    [_amount0: BigNumberish, _amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkBalance: TypedContractMethod<
    [_address: AddressLike],
    [[bigint, bigint] & { _rbnt: bigint; _shubh: bigint }],
    "view"
  >;

  exchange: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  reserveRBNT: TypedContractMethod<[], [bigint], "view">;

  reserveSHUBH: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "RBNT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SHUBH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [_amount0: BigNumberish, _amount1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkBalance"
  ): TypedContractMethod<
    [_address: AddressLike],
    [[bigint, bigint] & { _rbnt: bigint; _shubh: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "exchange"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserveRBNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserveSHUBH"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
